var that = this;
function __skpm_run (key, context) {
  that.context = context;

var exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/scripts/mozilla.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/data/mozilla/color.json":
/*!*************************************!*\
  !*** ./src/data/mozilla/color.json ***!
  \*************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, default */
/***/ (function(module) {

module.exports = [{"name":"Neon Blue","value":"#00ddff","token":"$brand-neon-blue"},{"name":"Lemon Yellow","value":"#FFFF98","token":"$brand-lemon-yellow"},{"name":"Warm Red","value":"#ff4f5e","token":"$brand-warm-red"},{"name":"Neon Green","value":"#54ffbd","token":"$brand-neon-green"},{"name":"Dark Purple","value":"#722291","token":"$brand-dark-purple"},{"name":"Dark Green","value":"#005e5e","token":"$brand-dark-green"},{"name":"Dark Blue","value":"#073072","token":"$brand-dark-blue"},{"name":"Black","value":"#000000","token":"$color-black"},{"name":"White","value":"#ffffff","token":"$color-white"},{"name":"Gray","value":"#ededf0","token":"$color-gray"},{"name":"Link","value":"#0060df","token":"$color-link"},{"name":"Link:Hover","value":"#003eaa","token":"$color-link-hover"},{"name":"Link:Visited","value":"#8000d7","token":"$color-link-visited"},{"name":"Link:Visited:Hover","value":"#6200a4","token":"$color-link-visited-hover"}];

/***/ }),

/***/ "./src/data/mozilla/colorstyle.json":
/*!******************************************!*\
  !*** ./src/data/mozilla/colorstyle.json ***!
  \******************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, default */
/***/ (function(module) {

module.exports = [{"name":"Text","value":"#000000"},{"name":"Background","value":"#FFFFFF"},{"name":"Link","value":"#0060DF"},{"name":"Link (Visited)","value":"#9059FF"},{"name":"Warm Red","value":"#FF4F5E"},{"name":"Lemon Yellow","value":"#FFFF98"},{"name":"Neon Green","value":"#54FFBD"},{"name":"Neon Blue","value":"#00DDFF"},{"name":"Dark Green","value":"#005E5E"},{"name":"Dark Blue","value":"#073072"},{"name":"Dark Purple","value":"#722291"}];

/***/ }),

/***/ "./src/data/mozilla/image.json":
/*!*************************************!*\
  !*** ./src/data/mozilla/image.json ***!
  \*************************************/
/*! exports provided: 0, 1, 2, default */
/***/ (function(module) {

module.exports = [{"name":"logo / logotype (black)","base64":""},{"name":"logo / logotype (white)","base64":""},{"name":"logo / logomark (favicon)","base64":"iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAAAXNSR0IArs4c6QAADHpJREFUeAHtnVuITX8Ux3/DGPfbMCITCrlfklIiUTwIE4VklAeeXMKDBzEPHshleJsi8SByCUkouRcSDUKIiGSM+924zPz+v9/uf3TMjHP2Pmetvc/av++u0zkzZ+/vXuuz1vfsffbev33ylFLaPDCBgJMEmjiZNZIGgf8JwABoBacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/JwwDoAacJwABOlx/J5wNBagItWrRQQ4YMUcOHD/ceAwcOVB07dlTt27f3Hm3btlXfvn1THz9+VB8+fPAez549Uzdu3FCVlZXq5s2b6v3796lXEtG7rVu3ViNHjlSjRo1SI0aMUF26dPFyKyws9J6bN2+u3r17p968eeM9Xr9+7T3b3M6fP68ePnwYUeR0q80zUppOTqkpU6ZQymWldfbsWa85g4p06NBBlZSUqJkzZ6qJEyeqgoKCoBJ/zf/gwQN18OBBtW/fPnX37t2/3gv7j169eqn58+er6dOnq0GDBqmmTZtmHMKLFy88I1gzHDt2TL18+TJjrSgXtAYge+gcmvr06RMor6FDh+oDBw7onz9/smVx+/ZtvXLlSt2mTZtAsWVTo2bNmum5c+fqM2fO6Lq6Opbcampq9I4dO3T//v1DyysbJknL0jW/Fc2lya8BzO6NPnz4MFtzNMakurpaL1u2TJvdDNaGmTx5sr5//35jIbD8zxrs6NGjesyYMax5JTVwtutx1wBm10avX79e//79m6UZ/Iia7wva7GplW8QGy/fr10+fPHnSTwhs8+zZs0eb70gN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"}];

/***/ }),

/***/ "./src/data/mozilla/text.json":
/*!************************************!*\
  !*** ./src/data/mozilla/text.json ***!
  \************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, default */
/***/ (function(module) {

module.exports = [{"name":"Heading XXL","fontFamily":"Zilla Slab","fontWeight":9,"fontSize":71,"lineHeight":70,"textColor":"#000000"},{"name":"Heading XL","fontFamily":"Zilla Slab","fontWeight":9,"fontSize":62,"lineHeight":62,"textColor":"#000000"},{"name":"Heading LG","fontFamily":"Zilla Slab","fontWeight":9,"fontSize":53,"lineHeight":53,"textColor":"#000000"},{"name":"Heading MD","fontFamily":"Zilla Slab","fontWeight":9,"fontSize":44,"lineHeight":44,"textColor":"#000000"},{"name":"Heading SM","fontFamily":"Zilla Slab","fontWeight":9,"fontSize":35,"lineHeight":35,"textColor":"#000000"},{"name":"Heading XS","fontFamily":"Zilla Slab","fontWeight":9,"fontSize":27,"lineHeight":26,"textColor":"#000000"},{"name":"Heading XXS","fontFamily":"Zilla Slab","fontWeight":9,"fontSize":18,"lineHeight":18,"textColor":"#000000"},{"name":"Paragraph LG","fontFamily":"Inter","fontWeight":5,"fontSize":18,"lineHeight":27,"textColor":"#000000"},{"name":"Paragraph MD","fontFamily":"Inter","fontWeight":5,"fontSize":16,"lineHeight":24,"textColor":"#000000"},{"name":"Paragraph SM","fontFamily":"Inter","fontWeight":5,"fontSize":14,"lineHeight":21,"textColor":"#000000"},{"name":"Paragraph XS","fontFamily":"Inter","fontWeight":5,"fontSize":12,"lineHeight":18,"textColor":"#000000"}];

/***/ }),

/***/ "./src/scripts/mozilla.js":
/*!********************************!*\
  !*** ./src/scripts/mozilla.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var sketch = __webpack_require__(/*! sketch */ "sketch");

var Style = sketch.Style;
var document = sketch.getSelectedDocument();

var UI = __webpack_require__(/*! sketch/ui */ "sketch/ui");

var Text = sketch.Text; // Import Data

var colorData = __webpack_require__(/*! ../data/mozilla/color.json */ "./src/data/mozilla/color.json");

var colorStyleData = __webpack_require__(/*! ../data/mozilla/colorstyle.json */ "./src/data/mozilla/colorstyle.json");

var imageData = __webpack_require__(/*! ../data/mozilla/image.json */ "./src/data/mozilla/image.json");

var textData = __webpack_require__(/*! ../data/mozilla/text.json */ "./src/data/mozilla/text.json");

/* harmony default export */ __webpack_exports__["default"] = (function () {
  // UI Message
  UI.message('🎨 text styles, layer styles, and fills were updated!'); // Clear Color Picker

  document.colors = []; // Clear all layer styles except for the logos and primary colors

  var remainingLayers = document.sharedLayerStyles.length;

  if (remainingLayers >= 25) {
    // Remove Extra logos
    var i;

    for (i = 25; i < remainingLayers; i++) {
      document.sharedLayerStyles.pop();
    } // Update Layer Style - Color Fills


    var j;

    for (j = 0; j < 4; j++) {
      // UI Colors
      document.sharedLayerStyles[j * 2].name = 'fill / ui / ' + colorStyleData[j].name;
      document.sharedLayerStyles[j * 2].style.fills = [{
        color: colorStyleData[j].value,
        fillType: Style.FillType.Color
      }]; // Border Colors

      document.sharedLayerStyles[j * 2 + 1].name = 'border / ui / ' + colorStyleData[j].name;
      document.sharedLayerStyles[j * 2 + 1].style.borders = [{
        color: colorStyleData[j].value,
        fillType: Style.FillType.Color,
        position: Style.BorderPosition.Inside
      }];
    }

    var k;

    for (k = 4; k < 11; k++) {
      // Brand Colors
      document.sharedLayerStyles[k * 2].name = 'fill / brand / ' + colorStyleData[k].name;
      document.sharedLayerStyles[k * 2].style.fills = [{
        color: colorStyleData[k].value,
        fillType: Style.FillType.Color
      }]; // Border Colors

      document.sharedLayerStyles[k * 2 + 1].name = 'border / brand / ' + colorStyleData[k].name;
      document.sharedLayerStyles[k * 2 + 1].style.borders = [{
        color: colorStyleData[k].value,
        fillType: Style.FillType.Color,
        position: Style.BorderPosition.Inside
      }];
    } // Update Layer Style - Pattern Fill


    var l;

    for (l = 0; l < 3; l++) {
      document.sharedLayerStyles[l + 22].name = imageData[l].name;
      document.sharedLayerStyles[l + 22].style.fills = [{
        fill: Style.FillType.Pattern,
        pattern: {
          patternType: Style.PatternFillType.Fit,
          image: {
            base64: imageData[l].base64
          }
        }
      }];
    } // Add Layer Style - Pattern Fill


    var m;

    for (m = 3; m < imageData.length; m++) {
      var image = imageData[m].base64;
      document.sharedLayerStyles.push({
        name: imageData[m].name,
        style: {
          fills: [{
            fill: Style.FillType.Pattern,
            pattern: {
              patternType: Style.PatternFillType.Fit,
              image: {
                base64: imageData[m].base64
              }
            }
          }],
          borders: [{
            enabled: false
          }]
        }
      });
    }
  } else {
    var n;

    for (n = 0; n < 4; n++) {
      // Add Layer Style - Color Fill
      document.sharedLayerStyles.push({
        name: 'fill / ui / ' + colorStyleData[n].name,
        style: {
          fills: [{
            color: colorStyleData[n].value,
            fill: Style.FillType.Color
          }],
          borders: [{
            enabled: false
          }]
        }
      }); // Add Layer Style - Border Fill UI

      document.sharedLayerStyles.push({
        name: 'border / ui / ' + colorStyleData[n].name,
        style: {
          fills: [{
            enabled: false
          }],
          borders: [{
            color: colorStyleData[n].value,
            fillType: Style.FillType.Color,
            position: Style.BorderPosition.Inside
          }]
        }
      });
    }

    var o;

    for (o = 4; o < 11; o++) {
      // Add Layer Style - Color Fill
      document.sharedLayerStyles.push({
        name: 'fill / brand / ' + colorStyleData[o].name,
        style: {
          fills: [{
            color: colorStyleData[o].value,
            fill: Style.FillType.Color
          }],
          borders: [{
            enabled: false
          }]
        }
      }); // Add Layer Style - Border Fill UI

      document.sharedLayerStyles.push({
        name: 'border / brand / ' + colorStyleData[o].name,
        style: {
          fills: [{
            enabled: false
          }],
          borders: [{
            color: colorStyleData[o].value,
            fillType: Style.FillType.Color,
            position: Style.BorderPosition.Inside
          }]
        }
      });
    } // Add Layer Style - Pattern Fill


    var p;

    for (p = 0; p < imageData.length; p++) {
      var _image = imageData[p].base64;
      document.sharedLayerStyles.push({
        name: imageData[p].name,
        style: {
          fills: [{
            fill: Style.FillType.Pattern,
            pattern: {
              patternType: Style.PatternFillType.Fit,
              image: {
                base64: imageData[p].base64
              }
            }
          }],
          borders: [{
            enabled: false
          }]
        }
      });
    }
  }

  var q;

  for (q = 0; q < colorData.length; q++) {
    // Color Picker
    document.colors.push({
      name: colorData[q].name,
      color: colorData[q].value
    });
  } // Text Styles


  if (document.sharedTextStyles.length === 0) {
    var r;

    for (r = 0; r < textData.length; r++) {
      var text = new Text({
        text: 'my text',
        style: {
          alignment: Text.Alignment.left,
          borders: [{
            enabled: false
          }],
          fontFamily: textData[r].fontFamily,
          fontSize: textData[r].fontSize,
          fontWeight: textData[r].fontWeight,
          lineHeight: textData[r].lineHeight,
          textColor: textData[r].textColor
        }
      });
      document.sharedTextStyles.push({
        name: textData[r].name,
        style: text.style
      });
    }
  } else {
    var s;

    for (s = 0; s < textData.length; s++) {
      document.sharedTextStyles[s].style.fontFamily = textData[s].fontFamily;
      document.sharedTextStyles[s].style.fontSize = textData[s].fontSize;
      document.sharedTextStyles[s].style.fontWeight = textData[s].fontWeight;
      document.sharedTextStyles[s].style.lineHeight = textData[s].lineHeight;
      document.sharedTextStyles[s].style.textColor = textData[s].textColor;
    }
  }
});

/***/ }),

/***/ "sketch":
/*!*************************!*\
  !*** external "sketch" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("sketch");

/***/ }),

/***/ "sketch/ui":
/*!****************************!*\
  !*** external "sketch/ui" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("sketch/ui");

/***/ })

/******/ });
  if (key === 'default' && typeof exports === 'function') {
    exports(context);
  } else {
    exports[key](context);
  }
}
that['onRun'] = __skpm_run.bind(this, 'default')

//# sourceMappingURL=mozilla.js.map